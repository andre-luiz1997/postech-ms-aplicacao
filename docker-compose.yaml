version: '3'

networks:
  docker_network:
    driver: bridge
    name: docker_network

services:
  mongo:
    restart: always
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'localhost:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongodb:/data/
      - mongodb_config:/data/configdb
    expose:
      - 27017
    networks:
      - docker_network
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger_ui_container_application
    ports:
      - "80:8080"
    volumes:
      - ./swagger:/usr/share/nginx/html/swagger
    environment:
      API_URL: /swagger/openapi.yaml
  # rabbitmq: 
  #   image: rabbitmq:3.13-rc-management-alpine
  #   container_name: rabbitmq_container
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   healthcheck:
  #     test: rabbitmq-diagnostics check_port_connectivity
  #     start_period: 0s
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3
  #   environment:
  #     RABBITMQ_DEFAULT_USER: "postech"
  #     RABBITMQ_DEFAULT_PASS: "soat"
  #   networks:
  #     - docker_network
  node:
    restart: always
    build: .
    ports:
      - 3001:3001
    volumes:
      - ./:/code
    depends_on:
      mongo:
        condition: service_started
      # rabbitmq: 
      #   condition: service_healthy
      #   restart: true
    networks:
      - docker_network
    environment:
      NODE_ENV: "production"
volumes:
  mongodb:
  mongodb_config: